{
  "properties": {
    "auto.leader.rebalance.enable": "true",
    "kafka.ganglia.metrics.port": "8671",
    "socket.send.buffer.bytes": "102400",
    "num.network.threads": "3",
    "log.segment.bytes": "1073741824",
    "kafka.ganglia.metrics.host": "localhost",
    "leader.imbalance.per.broker.percentage": "10",
    "replica.lag.time.max.ms": "10000",
    "replica.lag.max.messages": "4000",
    "fetch.purgatory.purge.interval.requests": "10000",
    "offsets.retention.minutes": "86400000",
    "kafka.ganglia.metrics.group": "kafka",
    "offsets.topic.compression.codec": "0",
    "zookeeper.connection.timeout.ms": "25000",
    "default.replication.factor": "1",
    "port": "6667",
    "num.recovery.threads.per.data.dir": "1",
    "log.dirs":  "/opt/local/kafka-logs",
    "kafka.ganglia.metrics.reporter.enabled": "true",
    "producer.purgatory.purge.interval.requests": "10000",
    "kafka.timeline.metrics.truststore.path": "{{metric_truststore_path}}",
    "log.index.interval.bytes": "4096",
    "controlled.shutdown.retry.backoff.ms": "5000",
    "security.inter.broker.protocol": "SASL_PLAINTEXT",
    "sasl.enabled.mechanisms": "PLAIN",
    "kafka.timeline.metrics.reporter.sendInterval": "5900",
    "num.partitions": "1",
    "offsets.commit.required.acks": "-1",
    "replica.fetch.min.bytes": "1",
    "message.max.bytes": "1000000",
    "offset.metadata.max.bytes": "4096",
    "kafka.timeline.metrics.reporter.enabled": "true",
    "controlled.shutdown.max.retries": "3",
    "min.insync.replicas": "1",
    "offsets.topic.segment.bytes": "104857600",
    "replica.fetch.wait.max.ms": "500",
    "controlled.shutdown.enable": "true",
    "log.roll.hours": "168",
    "log.cleanup.interval.mins": "10",
    "replica.socket.receive.buffer.bytes": "65536",
    "log.retention.bytes": "-1",
    "offsets.topic.num.partitions": "50",
    "delete.topic.enable": "false",
    "offsets.load.buffer.size": "5242880",
    "num.replica.fetchers": "1",
    "socket.request.max.bytes": "104857600",
    "kafka.timeline.metrics.maxRowCacheSize": "10000",
    "kafka.timeline.metrics.port": "{{metric_collector_port}}",
    "compression.type": "producer",
    "log.index.size.max.bytes": "10485760",
    "zookeeper.sync.time.ms": "2000",
    "kafka.timeline.metrics.truststore.type": "{{metric_truststore_type}}",
    "socket.receive.buffer.bytes": "102400",
    "queued.max.requests": "500",
    "controller.message.queue.size": "10",
    "offsets.commit.timeout.ms": "5000",
    "offsets.topic.replication.factor": "3",
    "num.io.threads": "8",
    "external.kafka.metrics.include.prefix": "kafka.network.RequestMetrics.ResponseQueueTimeMs.request.OffsetCommit.98percentile,kafka.network.RequestMetrics.ResponseQueueTimeMs.request.Offsets.95percentile,kafka.network.RequestMetrics.ResponseSendTimeMs.request.Fetch.95percentile,kafka.network.RequestMetrics.RequestsPerSec.request",
    "offsets.retention.check.interval.ms": "600000",
    "replica.fetch.max.bytes": "1048576",
    "sasl.mechanism.inter.broker.protocol": "PLAIN",
    "authorizer.class.name": "kafka.security.auth.SimpleAclAuthorizer",
    "super.users": "User:kafka",
    "kafka.metrics.reporters": "org.apache.hadoop.metrics2.sink.kafka.KafkaTimelineMetricsReporter",
    "listeners": "SASL_PLAINTEXT://localhost:6667",
    "kafka.timeline.metrics.hosts": "{{ams_collector_hosts}}",
    "controller.socket.timeout.ms": "30000",
    "replica.socket.timeout.ms": "30000",
    "zookeeper.session.timeout.ms": "30000",
    "zookeeper.session.timeout.ms": "30000",
    "auto.create.topics.enable": "false",
    "kafka.timeline.metrics.truststore.password": "{{metric_truststore_password}}",
    "external.kafka.metrics.exclude.prefix": "kafka.network.RequestMetrics,kafka.server.DelayedOperationPurgatory,kafka.server.BrokerTopicMetrics.BytesRejectedPerSec,kafka.server.KafkaServer.ClusterId",
    "leader.imbalance.check.interval.seconds": "300",
    "replica.high.watermark.checkpoint.interval.ms": "5000",
    "log.retention.hours": "168",
    "kafka.timeline.metrics.protocol": "{{metric_collector_protocol}}"
  }
}
